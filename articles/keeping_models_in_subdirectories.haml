-# title: Keeping models in subdirectories
-# published: 2006-11-29

:textile
  Matt Allen asked an interesting question on the Ruby on Rails Aus mailing list today:
  
  <blockquote>
    <p>I'm porting an existing app that has over 190 tables in it and my models directory is getting huge.</p>
    <p>Is there a way to organise your models into sub directories?  It's possible I've missed something obvious.</p>
  </blockquote>
  
  These days I like to arrange my <abbr title="Single Table Inheritance">STI</abbr>-based models in subdirectories. For example in one app I have a Payment model with various subclasses. I store the subclasses in a directory of their own:
  
  <pre>
  /app/models/payment.rb
  /app/models/payments/offline_payment.rb
  /app/models/payments/paypal_payment.rb
  </pre>
  
  So how do you arrange your models like this without littering <code>require</code>'s everywhere? Just add them to the <code>load_paths</code> config array in <code>environment.rb</code>:
  
  <pre><code class="ruby">
  config.load_paths += %w( \#{RAILS_ROOT}/app/models/payments )
  </code></pre>
  
  Now we can just refer to the payment subclasses and rails will automatically find the classes, require them and autoload them as neccessary:
  
  <pre><code class="ruby">
  class OfflinePaymentsController < ApplicationController
    def new
      @payment = OfflinePayment.new
    end
  end
  </code></pre>
  
  As an aside, I've just added <a href="http://danwebb.net">Dan Webb</a>'s  Javascript "CodeHighlighter":http://projects.danwebb.net/wiki/CodeHighlighter with <a href="http://encytemedia.com/">Justin Palmer</a>'s "VibrantInk":http://encytemedia.com/blog/articles/2006/01/03/textmate-vibrant-ink-theme-and-prototype-bundle TextMate bundle colours.
  
  Looks purty sweet eh (time to hop out of your feed reader)!
  
  I wonder if I can add a user script and customise the styles in "NetNewsWire":http://www.newsgator.com/NGOLProduct.aspx?ProdID=NetNewsWire to get the same affect for all blog posts following this convention.
  
  The only change I made was concatting CodeHighlighter into one file to reduce the page load by 4 HTTP requests.
