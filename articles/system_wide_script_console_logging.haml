-# title: System-wide script/console logging
-# published: 2007-02-06
-# updated: 2007-02-06

:textile
  "Last time":http://toolmantim.com/article/2007/1/31/logging_rails_activity_in_script_console I mentioned the @environment.rb@ logger hack that helps understand Rails activity in script/console. The only problem was you had to add it to each Rails app's @environment.rb@.
  
  Thanks to "a hint":http://toolmantim.com/article/2007/1/31/logging_rails_activity_in_script_console#comment_469 left by "Chad Humpries":http://spicycode.com/ we now have it system-wide via your @.irbrc@ file.
  
  Chuck the following in your @~/.irbrc@ file, load up a console and try a @User.find(:first)@.
  
  <strong class="update">Update</strong>: I've slightly rewritten Chad's code below to prevent a @NoMethodError@ on nil, remove some unnecessary parenthesises and to use @&&@ instead of @and@.
  
  <pre><code class="ruby">
  script_console_running = ENV.include?('RAILS_ENV') && IRB.conf[:LOAD_MODULES] && IRB.conf[:LOAD_MODULES].include?('console_with_helpers')
  rails_running = ENV.include?('RAILS_ENV') && !(IRB.conf[:LOAD_MODULES] && IRB.conf[:LOAD_MODULES].include?('console_with_helpers'))
  irb_standalone_running = !script_console_running && !rails_running
  
  if script_console_running
    require 'logger'
    Object.const_set(:RAILS_DEFAULT_LOGGER, Logger.new(STDOUT))
  end
  </code></pre>
  
  Look ma... inline logging:
  
  <pre><code>
  $ ./script/console 
  Loading development environment.
  >> Person.find(:first)
    Person Load (0.000432)   SELECT * FROM people LIMIT 1
  => #<Person:0x139a2c8 @attributes={...}>
  </code></pre>
  
  How dandy.
