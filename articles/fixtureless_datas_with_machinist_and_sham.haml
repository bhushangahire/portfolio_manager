-# title: Fixtureless datas with Machinist and Sham
-# published: 2008-10-27
-# updated: 2008-10-30

:textile
  Not long ago "Pete Yandell":http://notahat.com/ bestowed upon us an alternative to "FactoryGirl":http://github.com/thoughtbot/factory_girl and other fixture methods: "Machinist":http://github.com/notahat/machinist/. 
  
  Unfortunately I hadn't had a chance to check it out before my <a href="http://faces.rubyonrails.com.au/groups/sydney/meetings/2008-10-08/presos/2">Cucumbers and Factory Girls presentation last month at RORO Sydney</a> so I couldn't say much about it, but I've just started using for the 2009 revision of the "LGSA Cultural Awards":http://culturalawards.lgsa.org.au/ website.
  
  h3. What's Machinist?
  
  Equipped with a <code>Lathe</code>, Machinist allows you to craft beautifully valid and well-populated ActiveRecord models.
  
  It's extremely handy if you want an alternative to YML fixtures or you're sick seeing the ugly <code>save(false)</code>.
  
  Machinist also includes Sham: a class allowing to you to create repeatable dummy data for your text fixtures. Sham helps to remove magic strings whilst ensuring your test data is deterministic.
  
  h3. Installing Machinist
  
  It's a Rails plugin, so simply:
  
  <code>./script/plugin install git://github.com/notahat/machinist.git</code>
  
  Then create your <code>spec/blueprint.rb</code> and require it from your <code>spec/spec_helper.rb</code> like so:
  
  <pre><code class="ruby">require File.join(File.dirname(__FILE__), 'blueprint')</code></pre>
  
  Similarly for your <code>features/steps/env.rb</code>:
  
  <pre><code class="ruby">require File.join(RAILS_ROOT, 'spec', 'blueprint')</code></pre>
  
  h3. Defining your blueprints
  
  Machinist extends <code>ActiveRecord::Base</code> with the class methods <code>blueprint</code>, for defining the blueprint:
  
  <pre><code class="ruby">
  Post.blueprint do
    title "Hello world"
    text "<p>Hello there</p>"*3
    slug "some-slug"
    published_on Date.today
  end
  </code></pre>
  
  and <code>make</code>, for creating objects from the blueprint:
  
  <pre><code class="ruby">
  post = Post.make
  post.new_record? #=> false
  post.title #=> "Hello world"
  </code></pre>
  
  h3. Sham on you!
  
  Machinist includes Sham: a class allowing to you to create repeatable dummy data for your text fixtures.
  
  You define your sham's like so (here we're using the Faker gem):
  
  <pre><code class="ruby">
  Sham.title { Faker::Lorem.sentence }
  Sham.body { Faker::Lorem.paragraphs }
  Sham.slug { Faker::Lorem.words(1).first.downcase }
  </code></pre>
  
  bq. <em>Note: shamelessness is also obtainable through the addition of a single letter:</em> <code>uninitialized constant Shame (NameError)</code>
  
  Using your shams in your blueprint is easy:
  
  <pre><code class="ruby">
  Post.blueprint do
    title { Sham.title }
    text { Sham.body }
    slug { Sham.slug }
    published_on Date.today
  end
  </code></pre>
  
  You don't have to use Faker in your sham--to generate a random date you could simply do:
  
  <pre><code class="ruby">
  Sham.date do
    Date.civil((1990...2009).to_a.rand,
               (1..12).to_a.rand,
               (1..28).to_a.rand)
  end
  </code></pre>
  
  and use it in your blueprint just like the others:
  
  <pre><code class="ruby">
  Post.blueprint do
    title { Sham.title }
    text { Sham.body }
    slug { Sham.slug }
    published_on { Sham.date }
  end
  </code></pre>
  
  h3. Using them with specs and features
  
  To use your blueprints in your specs simply call <code>make</code>:
  
  <pre><code class="ruby">
  describe "Blog#to_param" do
    it "returns 'year-slug'" do
      blog = Blog.make
      blog.to_param.should == "\#{blog.year}-\#{blog.slug}"
    end
  end
  </code></pre>
  
  It's exactly the same for features/stories:
  
  <pre><code class="ruby">
  Given "there's a blog post" do
    Post.make
  end
  </code></pre>
  
  h3. How does it compare to FactoryGirl?
  
  Machinist's syntax is definitely cleaner. The equivalent blueprint in FactoryGirl looks like:
  
  <pre><code class="ruby">
  Factory.define :post do |p|
    u.title "Hello world"
    p.text "<p>Hello there</p>"*3
    p.slug "some-slug"
    p.published_on Date.today
  end
  </code></pre>
  
  or more realistically:
  
  <pre><code class="ruby">
  Factory.define :post do |p|
    p.title "Hello world"
    p.text "<p>Hello there</p>"*3
    p.slug { Factory.next(:slug) }
    p.published_on { Factory.next(:published_on_date) }
  end
  
  Factory.sequence(:slug) {|n| "slug-\#{n}"}
  # ...
  </code></pre>
  
  To generate sequences in sham you simply accept a block parameter, for example:
  
  <pre><code class="ruby">
  Sham.slug {|n| "slug-\#{n}" }
  </code></pre>
  
  Machinist's ways of defining associations are also much cleaner if everything matches up:
  
  <pre><code class="ruby">
  Comment.blueprint do
    post
  end
  </code></pre>
  
  and if you've an association with a custom <code>class_name</code> you can call <code>make</code> yourself:
  
  <pre><code class="ruby">
  Post.blueprint do
    author { User.make }
  end
  </code></pre>
  
  h3. Contribute or follow development
  
  The "machinist github repo":http://github.com/notahat/machinist is the best place to start.
  
  You could even move <a href="http://github.com/webjam/webjam/tree/master/spec/factories.rb ">webjam's <code>spec/factories.rb</code></a> to Machinist and send a pull request if you're really keen ;)
  
  If you're a Victorian head to the "October Melbourne RORO meetup":http://groups.google.com/group/rails-oceania/browse_thread/thread/bf70bf2d254f1987 where Pete will be demonstrating how to lathe Ruby objects with his new contraption.

#comments.comments
  %h3 Comments
  %p.old-comments New comments are no longer being accepted.
  %ol
    %li#comment_1542
      %p.author
        %a{:href => 'http://notahat.com/'} Pete Yandell
      .body
        :textile
          Thanks for the write-up! A few things to add that haven't made it into the documentation yet:
          
          A blueprint should take care of creating all the data that your test doesn't care about, leaving you to define the data that it does care about in the test setup. For example, you might have an editable flag on a comment and want to write some tests for it. In your test you want to be able to write:
          
          <pre>
          @comment = Comment.make(:editable => true)
          </pre>
          
          But a comment can't exist without an author, and some body text, and a post. So you put those in the blueprint:
          
          <pre>
          Comment.blueprint do
            post { Post.make }
            author { Sham.author_name }
            body { Sham.comment_body }
          end
          </pre>
          
          You can even abbreviate this to:
          
          <pre>
          Comment.blueprint do
            post
            author { Sham.author_name }
            body { Sham.comment_body }
          end
          </pre>
          
          Machinist will automatically do the Post.make for you.
          
          You mentioned that Machinist doesn't have sequence generation. Wrong! Sham lets you do this:
          
          <pre>
          Sham.author_name {|index| "Author number \#{index}" }
          </pre>
          
          There will be some more extensive docs (and probably a screencast) on all of this sometime soon.
          
    %li#comment_1544
      %p.author
        %a{:href => 'http://toolmantim.com/'} Tim Lucas
      .body
        :textile
          thanks Pete.
          
          That's rockin, I didn't know about the sequence generation.
          
          I've updated the Machinist vs FactoryGirl section with new details and examples.
    %li#comment_1545
      %p.author
        %a{:href => 'http://mocra.com'} Dr Nic
      .body
        :textile
          We're using machinist + faker. They make me happy.
    %li#comment_1546
      %p.author
        %a{:href => 'http://openmonkey.com/'} Tim Riley
      .body
        :textile
          Hi all, and thanks for the informative post, Tim!
          
          I've been using Faker's Lorem Ipsum generator to generate seed data in my apps. I got a bit tired of looking at the unrealistic Latin through the app, so I ended up using markov chains & real english source data to generate more realistic looking seed data. This might be worth a look if you're using Faker for more than just populating models in your tests.
          
          I wrote up the approach here: http://log.openmonkey.com/post/55783578/using-markov-chains-to-provide-english-language-seed
    %li#comment_1547
      %p.author
        %a{:href => 'http://openmonkey.com/'} Tim Riley
      .body
        :textile
          Sorry, here is the link formatted to be click-friendly :)
          
          "Using Markov Chains to provide English language seed data for your Rails application":http://log.openmonkey.com/post/55783578/using-markov-chains-to-provide-english-language-seed
          
    %li#comment_1549
      %p.author
        Sam Livingston-Gray
      .body
        :textile
          Your equivalent FactoryGirl samples all call methods on p, except for the first line ("u.title [...]").  Typo?
    %li#comment_1550
      %p.author
        %a{:href => 'http://toolmantim.com/'} Tim Lucas
      .body
        :textile
          @drnic happy is good. Good is happy.
          
          @timriley nice... interesting about Markov. For sample data that'd be mighty handy.
          
          @sam: yep, a typo. Fixed and thanks!
