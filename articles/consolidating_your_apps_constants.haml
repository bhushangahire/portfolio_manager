-# title: Consolidating your app&#8217;s constants
-# published: 2007-05-18
-# updated: 2007-05-22

:textile
  bq. Sprinkling constants doth maketh a mad-man
  
  You've a bunch of configuration constants in your application (email addresses, host addresses, etc) and you'd like a nice, cozy place to keep them, and a method of overriding the defaults for each environment.
  
  There's a million ways to skin this cat, but here's the simple approach I took in my latest app.
  
  <em>...and yes, a constant that changes is not a constant, but I'll 
  pretend you didn't say that.</em>
  
  <strong class="update">1st update:</strong> I originally had a typo: the variables should be declared with <code>@@</code>, not <code>@</code>.
  
  <strong class="update">2nd update:</strong> It's @active_support@, not @activesupport@!
  
  h2. Creatin tha module
  
  Firstly, we'll set up a new module to store our config, let's call it @MyAppConfig@ and it can live in @RAILS_ROOT/config/my_app_config.rb@. In it, we'll create a standard Ruby module:
  
  <pre><code class="ruby">
  module MyApp
    module Config
    end
  end
  </code></pre>
  
  h2. Hookin it in
  
  To allow each environment to customise the config we'll want to set this up before @Rails::Initializer#run@ is called within @environment.rb@ (see my previous article "Environments and the Rails Initialisation Process":http://toolmantim.com/article/2006/12/27/ for more info).
  
  We'll simply @require@ the file after @boot@ in our @environment.rb@:
  
  <pre><code class="ruby">require File.join(File.dirname(__FILE__), 'boot')
  
  require 'my_app_config'
  
  Rails::Initializer.run do |config|
    # ...
  </code></pre>
  
  Next we'll add a configurable variable, with a default, to our module:
  
  <pre><code class="ruby">module MyApp
    module Config
      @@paypal_host = "https://www.sandbox.paypal.com"
    end
  end</code></pre>
  
  This works just fine, apart from the fact you can't access the instance variable outside of the module:
  
  <pre><code>irb> MyApp::Config.paypal_host
  NoMethodError: undefined method `paypal_host' for MyApp::Config:Module</code></pre>
  
  To access and modify the instance variable we need a set of good 'ol accessors. If this were a class, not a module, we'd sprinkle an @attr_accessor@ and be on our way, but as this is a module we have to define the methods ourself.
  
  <pre><code class="ruby">module MyApp
    module Config
      @@paypal_host = "https://www.sandbox.paypal.com"
      def self.paypal_host
        @@paypal_host
      end
      def self.paypal_host=(paypal_host)
        @@paypal_host = paypal_host
      end
    end
  end</code></pre>
  
  <pre><code>irb> MyApp::Config.paypal_host
  => "https://www.sandbox.paypal.com"</code></pre>
  
  h2. Sprinklin the sexy
  
  Ok, so far it's not looking too pretty is it? Don't worry... good 'ol ActiveSupport ships with a nice little helper, @mattr_accessor@, which provides exactly the same functionality as Ruby's @attr_accessor@ but for modules. Unfortunately the author chose for it a life of seclusion,  with a tattoo of @:nodoc:@, but that's never stopped us brave venturers before.
  
  ActiveSupport isn't loaded until the @Rails::Initializer#run@ method is executed, so we'll also need to @require 'activesupport'@ before we can use @mattr_accessor@:
  
  <pre><code class="ruby">require 'active_support'
  
  module MyApp
     module Config
      mattr_accessor :paypal_host
      @@paypal_host = "https://www.sandbox.paypal.com"
    end
  end</code></pre>
  
  So now we have our @environment.rb@ requiring this module and we can access it anywhere in our Rails application with a simple <code class="ruby">MyApp::Config. paypal_host</code>.
  
  h2. Overidin the defaults
  
  To override config vars in different environments you can simply call its @mattr_writer@. For example, we'll want to use the live paypal server in production, so we add the following line to the bottom of @RAILS_ROOT/config/environments/production.rb@:
  
  <pre><code class="ruby">MyApp::Config.paypal_host = "https://www.paypal.com"</code></pre>
  
  and voila! That's all there is to it.
  
  h2. So you wanna get funky
  
  ...and here's some exercises for the reader (all of which are a purely academic pursuit I'd most probably not bother using):
  
   * Extending @Module@ with @mattr_accessor_with_default@
   * Extending @Rails::Config@ to provide a @my_app@ method, so instead of @MyApp::Config.paypal_host@ in your environments you could just use @my_app.paypal_host@
   * Implement @MyApp.config(&block)@ for block-style configuration
