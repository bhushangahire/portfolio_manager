-# title: Simple step-based validation with ActiveRecord
-# published: 2007-11-13
-# updated: 2007-11-13

:textile
  <pre><code class="ruby">class Project < ActiveRecord::Base
    attr_accessor :step
  
  private
    def self.step(name, &block)
      with_options(:if => "step == :\#{name}") do |opts|
        opts.instance_eval(&block)
      end
    end
  
  public  
    step :summary do
      validates_presence_of :title
    end
  end</code></pre>
  
  Which can be used like so:
  
  <pre><code class="ruby">map.resources :projects, :member => {:summary => :any}</code></pre>
  
  <pre><code class="ruby">class ProjectsController < ApplicationController
    def summary
      @project = Project.find(params[:id])
      if request.put?
        @project.step = :summary
        @project.attributes = params[:project]
        if @project.save
          flash[:notice] = "Project summary updated"
          redirect_to project_path(@project)
        end
      end
    end
  end
  </code></pre>
  
  and if that doesn't quench your step-based validation thirst there's always <a href="http://blog.jayfields.com/">Jay Field</a>'s all-you-can-eat <a href="http://validatable.rubyforge.org/">validatable plugin</a>.
  
  <strong class="update">Update:</strong> and what about figuring out if a project is valid for a given step?
  
  <pre><code class="ruby">class Project < ActiveRecord::Base
    # ...
    def step_complete?(step_name)
      project_for_step = dup
      project_for_step.errors.clear
      project_for_step.step = step_name
      project_for_step.valid?
    end
  end</code></pre>
