-# title: Breaking hearts
-# published: 2007-05-14

:textile
  Apparently "Giles":http://gilesbowkett.blogspot.com/ was so broken hearted about my "7 seven line snippet":http://tumble.toolmantim.com/post/1733189 he felt the need to write "a 1700 word <strike>entertainment piece</strike> blog post":http://gilesbowkett.blogspot.com/2007/05/rails-developers-junior-and-senior.html. I don't mind a good hearty discussion on the lack of computer-science in the web programming field, but let's get the facts straight.
  
  <blockquote>1. lower(email) runs a full table scan as opposed to using the index. That's bad programming in any language.</blockquote>
  
  That's true, for some cases, but if you're using PostgreSQL&#8212;which we are&#8212;you can quite easily "add an index on the @lower()@ expression":http://www.postgresql.org/docs/8.1/interactive/indexes-expressional.html.
  
  I didn't think it needed to be said, but when you see an abbreviated snippet of AR code it's probably best not to assume too much about the DBMS's execution plan without knowing a bit more info.
  
  <blockquote>2. What happens when you call it with:
  <code class="ruby">find_by_email("john@example.com", :conditions=>"true")</code></blockquote>
  
  Nothing you wouldn't have expected:
  
  <pre><code class="ruby">
  User.find_by_email('john@example.com', :conditions => 'true')
  # User Load (0.000970)   SELECT * FROM users WHERE (lower(email) = lower('john@example.com')) AND (true) LIMIT 1
  </code></pre>
  
  <blockquote>
  3. with_scope is a Rails technique. A Ruby developer, someone who learned the language, not just the framework, would write:
  <code class="ruby">find(:first, { :conditions=>"..." }.merge(options)</code>
  Shorter, simpler and a transferrable skill you can use outside of ActiveRecord.
  </blockquote>
  
  Unfortunately @Hash#merge@ won't help you here. Observe:
  
  <pre><code class="ruby">{:conditions => "lower(email) = lower('john@example.com')"}.merge({:conditions => "true"})
  # => { :conditions => "true" }
  # whereas I wanted:
  #    { :conditions => "lower(email) = lower('john@example.com') AND true" }
  </code></pre>
  
  @with_scope@ gives you this desired behaviour.
  
  For the record, I too agree that @with_scope@ should be a protected method, and that using @with_scope@ outside of AR is _most probably_ naughty; but, using it internally, from within a well-tested @ActiveRecord::Base@ subclass method, I think is just fine.
  
  If you still feel that using @with_scope@ internally is no better than sending polar bears to the slaughterhouse, do feel free to implement and publish your own version...
  
  --tim: the idiot, self-saboteur, framework coder.
