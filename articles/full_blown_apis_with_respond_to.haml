-# title: Full-blown APIs with respond_to?
-# published: 2007-02-26

:textile
  From "my last comment on the attributes=nil post":http://toolmantim.com/article/2007/2/14/ar_base_attributes_nil#comment_493:
  <blockquote><p>Whilst I love repond_to, does anybody out there actually provide their public API by just pointing the world at their controllers?</p><p>Can you provide useful, robust and human error handling just using this, and is there a perfect 1:1 mapping between browser request params or do you end up having to mung params and litter if @request.api?@ around various actions?</p>
  </blockquote>
  
  Not to mention a few others; API versioning, reflection, and differences in caching.
  
  Don't get me wrong, I love @respond_to@, but it _is_ most useful when you're assuming the controller part acts exactly the same regardless of how the request arrived.
  
  Those who've implemented a complete, documented and supported API for their Rails app: did you route through your existing controllers and use @respond_to@, or did you have separate controllers and make sure your model was sexy enough that the controllers were trivial anyways?
