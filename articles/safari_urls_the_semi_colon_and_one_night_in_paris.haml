-# title: Safari, URLs, the semi-colon and one night in Paris
-# published: 2006-09-19
-# updated: 2007-03-09

:textile
  <strong class="update">Update:</strong> Manfred (of fingertips) has "released a plugin":http://www.fngtps.com/2007/03/url-encoded-semicolons-http-authentication-and-safari to fix Safari whilst we wait for Apple to update OS X.
  
  My production site is spitting the dummy with Safari whenever there's a semi-colon in the URL.
  
  As far as I can tell you don't need to escape semi-colons, and every other browser works just fine.
  
  In the mean time, here's the dirtiest of dirty hacks to ensure semi-colons get escaped.
  
  In application.rb:
  
  <pre><code class="ruby">
  def url_for(options = {}, *parameters_for_method_reference)
    (result = super).is_a?(String) ? result.gsub(';','%3B') : result
  end
  </code></pre>
  
  Surely there's people running on Rails edge using the Rest stuff with Safari? I wonder what's causing it on this site. 
   
  Any recommendations on software for OS X to sniff the requests between Safari and Apache?
  
  _Update_: After "further discussion on rails-core":http://groups.google.com/group/rubyonrails-core/browse_thread/thread/9f7d8d2ae530a5da/0cae138836e0e558#0cae138836e0e558, the following would probably lock things down further:
  
  <pre><code class="ruby">
  def url_for(options = {}, *parameters_for_method_reference)
    if safari? && authenticated?
      (url = super).is_a?(String) ? url.gsub(';','%3B') : url
    else
      super
    end
  end
  
  def safari?
    request.env['HTTP_USER_AGENT'].to_s.include?('AppleWebKit')
  end
  
  @@auth_headers = %w(X-HTTP_AUTHORIZATION HTTP_AUTHORIZATION Authorization)
  def authenticated?
    @@auth_headers.any? { |h| request.env.has_key?(h) }
  end
  </code></pre>
