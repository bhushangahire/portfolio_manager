-# title: Avoid DB calls when setting up your environment
-# published: 2006-12-09

:textile
  As one of my projects has increased in complexity I've started to use the environment.rb and the other specific environments to set up mocks and other tidbits.
  
  For example, here I'm setting the current @Locale@ based on @RegionPreference@, which is an ActiveRecord model, from within @environment.rb@:
  <pre><code class="ruby">
  Locales.current = Locales.locale_for_timezone(RegionPreference.find_or_initialize.timezone) rescue nil
  </code></pre>
  
  This was all fine and dandy until I tried to set the app on a new machine. 
  
  <pre><code>
  $ rake db:schema:load RAILS_ENV=staging
  (in /usr/home/voicebox)
  rake aborted!
  SQLite3::SQLException: no such table: region_preferences:
  SELECT * FROM region_preferences LIMIT 1
  </code></pre>
  
  What happened?
  
  @db:schema:load@ depends on the @environment@ task, which loads your Rails environment. The same goes for @db:migrate@. My environment was being loaded and trying to call the database before @db:schema:load@ could do it's job.
  
  Lesson: <strong>Accessing your database from within your environment set up is evil.</strong>
  
  You can't assume your database exists, or is an up-to-date version, when your environment's are being executed.
  
  The fix? Moving the code to the model where it should have been in the first place.
  
  <pre><code class="ruby">
  module Locales
    def self.current
      @@current ||= locale_for_timezone(RegionPreference.find_or_initialize.timezone)
    end
  end
  </code></pre>
