-# title: How to use ActiveRecord eager loading to raise your blood pressure
-# published: 2006-09-29
-# updated: 2006-09-30

:textile
  "Cameron":http://themaninblue.com and I's little baby "Web Connections":http://connections.webdirections.org had major problems the past few days. Heart wrenching for Cam, as he was responsible for the design and front-end, and I was responsible for the back end, and it all fell down on the day of the conference.
  
  Originally I thought it was a server problem... the rails server process was growing to many gigabytes in a matter of minutes, and the server had gone down the night before.
  
  It turned out not only was it my app's problem, but my app probably took down the entire shared server the night before as well.
  
  For some reason I took waaay too long to track it down, but finally, and with help from Jeremy at "SegPub":http://segpub.net, I found it was in fact Cam's profile page that was killing it.
  
  Why was Cam's profile killing it? Well, let's have a look at the PeopleController#show action:
  
  <pre><code>
    def show
      @person = Person.find(params[:id], :include => [:photo, { :taggings => [:tag, :tagger] }, {:outgoing_relationships => :related_person}, {:incoming_relationships => :person}])
      respond_to do |format|
        format.html {
          if logged_in?
            @relationship_to = current_person.outgoing_relationships.to(@person)
          end
        }
        format.xml {
          render_xml @person.to_xml(:include => [:tags,
                                                 :outgoing_relationships,
                                                 :incoming_relationships,
                                                 :photo])
        }
        format.js {
          render_json @person.to_json
        }
      end
    end
  </code></pre>
  
  Now I thought I was being super-tricky with that massive :include statement, making the profile page only perform one SQL statement to fetch all the required data.
  
  It turns out that it was being a little too-tricky... the SQL statement ended up so large that it freaked out the database connection and the Rails app just blew up, taking the whole server with it.
  
  Lesson learnt? Multiple SQL statements are OK. Check your eager loading in ActiveRecord and think about how it'll scale.
  
  Changing the code to a simple:
  
  <code>@person = Person.find(params[:id])</code>
  
  fixed everything, and it's now ticking along smoothly again.
