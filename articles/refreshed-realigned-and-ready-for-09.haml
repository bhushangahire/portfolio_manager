-# title: Refreshed, realigned and ready for 2009
-# published: 2009-01-02

:textile

  It was at over 2.5 years ago I did anything major to toolmantim.com. For the last 2.4 years I've wanted to redesign it and the past 1.5 years I've wanted to re-code it. Top that off with working on the new (but yet to be released) "Agency Rainford":http://agencyrainford.com site and Carla's "Hello Canary":http://hellotherecanary.com I'd had enough and found some hours between "Squatter":http://flickr.com/photos/toolmantim/3142586197/ and "ridiculously well-decorated desserts":http://flickr.com/photos/toolmantim/3134787020/ these holidays to get something new up.

  h2(#menki). Menki


  <div class="pic right two">
    <a href="http://www.flickr.com/photos/toolmantim/3161120053/"><img src="http://farm4.static.flickr.com/3106/3161120053_1f13717bf7_m.jpg" width="142" height="240" alt="The Menki design" /></a>
  </div>

  It was about 9 months ago I started writing "Menki":http://github.com/toolmantim/menki, the <a href="http://enkiblog.com/">Enki</a>-inspired blogging software that was never to be. "hassox":http://github.com/hassox and "lachlanhardy":http://lachstock.com.au/ pitched in with patches&#8212;hell, Lachlan even noticed a PSD I'd pushed and coded up the design for the Menki site w/o me even knowing&#8212;total dude. Unfortunately Menki wasn't to be, but fortunately two weeks later and a few spare holiday hours pushing to github and here it is, the new toolmantim, shiny and reading for your viewing.

  h2(#ze-codes). Simplifying ze codes

  Releasing generalised code for reuse by other developers has never particularly interested me, I'm much more excited about doing the simplest thing possible and sharing my learnings with others similar to myself (teach a man to fish yakyakyak). The idea of creating and supporting blog software that has a bunch of features I have no use for quite frankly scares me.
  
  My immediate requirements were simple:

  # Create and preview articles with good live preview
  # Make any style and site changes necessary as I authored the article
  # Provide an ATOM for the articles
  # Provide a mechanism for article feedback

  From "the readme":http://github.com/toolmantim/toolmantim/tree/master/Readme.textile:
  
  <blockquote>
    <p>The idea is that you want publishing to be previewable, simple and versioned. You want to be able to tweak the appearance of your site as you produce more complex articles. You want to simply add an image to your site, not build a whole admin providing file uploads. The major downside (if it is indeed at all a downside) is to publish you need access to your repo so you can git commit and cap deploy, though I could imagine using github’s web editing features to add articles and trigger a site update w/o touching a terminal.</p>
    <p>It’s somewhat similar to <a href="http://github.com/karmi/marley">Marley</a> and other sintra-based blogging apps with the following big exceptions:</p>
    <ul>
      <li>You can use any markup format thanks to HAML’s filters (e.g. <code>:markdown</code>)</li>
      <li>There is no commenting. This forces more quality feedback via email and other blog posts, forces you to properly integrate feedback into the article and avoids the maintenance headache of comment spam.</li>
    </ul>
  </blockquote>
  
  Feel free to steal and plunder, and you've "plenty of other options":http://github.com/search?q=blog if your use case wildly diverges. If you're keen to see something extracted then I'd love to hear your thoughts.
  
  h2(#new-design). A new design

  After sketching and scanning a Menki logo and bashing together a website on the kitchen table at "the nerf palace":http://nerfpalace.org/ it was a shame to have it join it's cousin in the land of designs-never-published.
      
  Luckily I have the honour to work with some brilliant designers and don't often get a chance to give design and front-end coding some time. Things like setting up "a grid":/?grid (props to "JSM's 24ways post":http://24ways.org/2008/making-modular-layout-systems), fidgeting with source order and wearing my finger out with trackpad photoshopping has been jolly good fun.
  
  There's still more work to do on the article layout&#8212;for example I'd like to have a left gutter for small images&#8212;but it's a good start.
    
  h2(#comments-and-discussion). Comments and discussion
  
  A well trodden topic, and not one with the same answer for everyone, I've debated long and hard about whether to include comments and their value to the site. Different types of feedback require different tools and consideration.
  
  h3. Errors and ommissions
  
  Many of the technical articles, such as a "Getting Rails talking to SQLServer on OSX via ODBC":/articles/getting_rails_talking_to_sqlserver_on_osx_via_odbc, are old and discussing software I haven't touched since writing about it. Errors and corrections end up in the comments, but then once the article is updated there's a spattering of redundant comments. Comments like these should simply be integrated and discarded, so I'm choosing to leave these to email.
  
  h3. Open-ended discussions
  
  I've tried spurring a discussion by an article which poses a question, such as "Full-blown APIs with respond_to?":/articles/full_blown_apis_with_respond_to.
  
  Not only does it feel like the wrong place to have the discussion there just aren't that many eyeballs on the article to get interesting feedback.
  
  h3. Social commentary and congratulations
  
  They feel good, but we've got twitter and friends where their transient nature is OK and they have more social context to strangers who would have read it at the end of the article.
  
  h3. Social media, openness and accountability
  
  And then there's that whole "Social Media thang":http://liako.biz/2008/12/thank-you-2008-you-finally-gave-new-media-a-name/.
  
  Open conversations and accountability are important&#8212;I like that if you disagree with your standard blog post you can just have a rant right there in the textarea.
  
  Making tools to do this well is hard: live preview, update notifications, spam management, etc. I just don't want to spend my time writing and maintaining that code.
  
  Twitter is too brief, emails too closed and you can always publish your thoughts in an article (it's been "done before":http://gilesbowkett.blogspot.com/2007/05/rails-developers-junior-and-senior.html)... so I'm not sure what the answer is. I've thought of integrating "disqus":http://disqus.com/ but I'm not sure that's the right answer either.
  
  I'm all for ideas on how to encourage the openness and accountability.
  
  In the mean time I've included the old comments in the articles until I converge on some kind of consensus.
  
  h2. Onwards and Upwards
  
  With this up-to-date, AR's latest project, our new office and site and then SXSW in March it's going to be an exciting year.