-# title: Moving on from centralised-decentralised development, or: what&#8217;s after github and gitorious?
-# published: 2008-03-31

:textile
  h2. Kittens are dropping
  
  "!http://farm3.static.flickr.com/2412/1537313407_9f1c31276b_m.jpg(Every time you repeat yourself, Lachie kills a kitten)!":http://flickr.com/photos/teamaskins/1537313407/
  
  "Every time you repeat yourself, Lachie kills a kitten - Ben Askins":http://flickr.com/photos/teamaskins/1537313407/
  
  One of the more popular new ideas us Rubyists have got our hands on to, git and the ideals of distributed development, has definitely taken off and doesn't look to be slowing.
  
  In response to all this gittyness two great code hosting platforms have popped up: "Gitorious":http://gitorious.org/ a self-hosting free and open-source repository hosting platform; and "Github":https://github.com/, a slick, commercial repository hosting platform.
  
  But stop. Before you go and move everything to one of these new services, let me tell you this: Everytime someone uses a centralised service to house their decentralised development Linus, not <a href="http://flickr.com/photos/teamaskins/1537313407/">Lachie</a> this time, kills a kitten.
  
  h2. Join us in the playpen
  
  Don't get me wrong--github is a sweet service, with a sweet design, new ideas and made by a cracker of a team; and gitorious is a fantasticly free and open service. It's not that I don't like gitorious and github&#8212;I love them in fact&#8212;I just get the feeling there's a bigger problem that's not getting enough attention.
  
  I think we absolutely need services like Github and Gitorious because, as a whole, we don't quite understand the dynamics of interaction and communication in a distributed development environment.
  
  Who forks? How many forks? Where are the forks? Who's fork is up-to-date? Who's is authoritative? How do we request colloboration (push & pull)? How do we track what's going on? How do the end users affect what's important, what gets pulled upstream?
  
  Github and gitorious's strength are as communication tools. They help make visible the distributed development activity--you get to see repository activity, forks and merge requests.
  
  > What we learn from history is that people don't learn from history.
  
  Whilst these services help us learn a lot, what about the glaring hole in their attractiveness: centrality. Let's rewind to a slide from "Linus' tech talk on Git":http://www.youtube.com/watch?v=4XpnKHJAok8:
  
  !http://toolmantim.com/images/blog/distributed_development.jpg!
  
  Does that diagram look familiar? Substitute the central blue frowny face on the left with either github or gitorious.
  
  Downtime. Take for example yesterday's github downtime. Github's still beta and not currently open for reg, so the downtime is understandable, but as there's an increasingly large number of new Ruby and Rails project being hosted on Github the centralised nature is starting to show it's big ugly head. The problem is multiplied when every fork of the project is hosted on the same service--I couldn't find a copy of the next Textmate Rails bundle anywhere... they were all hosted on Github.
  
  Replication and redundancy. I'm reminded of "Tantek Celic's WE05 talk":http://tantek.com/presentations/2005/09/microformats-evolution/ on Microformats where he said the web's tendency to replicate files and data, the sheer chaos of data sharing on the web, created a kind of backup--if a certain file wasn't available on a given server you could be sure, given it was popular enough, to find it elsewhere. Not the case if everything is hosted in the same spot.
  
  h2. Looking to the future
  
  As much as we need playpens of innovation we also need solid, open and distributed tools that help us create an ecosystem of innovation and community.
  
  Do we *need* to sacrifice distributed and open development to gain these benefits of communication and interaction?
  
  As we use tools such as gitorious and github let's dream, and plan, an open and distributed system which provides the same level of communication and interaction whilst keeping with the distributed and open development model.
